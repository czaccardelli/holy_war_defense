join_holy_war_master_trigger = {
	$JOINER$ = { save_temporary_scope_as = joiner }
	scope:joiner = {
		NOT = { is_at_war_with = scope:defender }
		NOT = { is_allied_to = scope:attacker }
		is_independent_ruler = yes
		is_landed = yes
		desire_to_join_holy_war > 0
	}
}

join_holy_war_dear_to_me_trigger = {
	OR = {
            is_spouse_of = $CHAR$
		    is_close_or_extended_family_of = $CHAR$
		    has_relation_lover = $CHAR$
		    has_relation_friend = $CHAR$
		    has_secret_relation_lover = $CHAR$
		    has_relation_soulmate = $CHAR$
		    has_relation_best_friend = $CHAR$
		    is_parent_of = $CHAR$
    }
}

join_holy_war_within_range_trigger = {
	scope:defender = {
		$JOINER$ = { save_temporary_scope_as = joiner }
		# drill down to the county level of the defender's territory
		any_realm_county = {
			# now that we've drilled down to the county level of the defender, see if any of the holders of those counties
			# neighbor or are across a sea zone to the attacker
			# we need to do it this way because the reverse wouldn't allow us to be drilled down to the county level of the defender
			# and large blobs would pull in more possible defenders due to the distance not being localized
			# to only those counties that, for example, a count would be able to launch a holy war from
			OR = {
				AND = {
					# only use coastal counties that aren't too far from the attacker to simulate those counties that are holy-warrable
					is_coastal_county = yes
					scope:attacker = {
						realm_to_title_distance_squared = {
							title = prev
							value <= 10000
						}
					}
				}
				any_neighboring_county = {
					holder.top_liege = scope:attacker
				}
			}
			# finally, see if the joiner is within range of at least one coastal or neighboring county
			scope:joiner = {
				realm_to_title_distance_squared = {
					title = prev
					value <= $RANGE$
				}
			}
		}
	}
}